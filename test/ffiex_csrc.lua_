local ffi = require 'ffiex.init'

return function (builder, setup)
	print("----------- test "..builder)
	ffi.copt(setup())
	ncall = 0
	local lib,ext = ffi.csrc('test', [[
	#if defined(__GNUC__)
	#include <stdio.h>
	#include <stdlib.h>
	#else // use tcc original libc header.
	#include <tcclib.h>
	#endif
	#include <stdbool.h>
	#include "my.h"
	#if defined(_MYDEF)
	#define GEN_ID(x, y) (x + y)
	#else
	#define GEN_ID(x, y) (x * y)
	#endif
	#define MYID (_MYDEF2)
	extern void hello_csrc(int id, char *buffer) { sprintf(buffer, "id:%d", id); }
	extern bool gen_id_test(int x, int y, int r) { return r == GEN_ID(x, y); }
	void export(int id) { printf("%d", id); }
	static inline void not_export(int id) { 
		printf("it should not export"); 	
	}
	]])
	assert(lib, "build error:"..tostring(ext))

	local msg = ffi.new("char[256]")
	lib.hello_csrc(ffi.defs.MYID, msg)
	assert("id:101" == ffi.string(msg))
	lib.hello_csrc(ffi.defs.GEN_ID(10, 20), msg)
	assert("id:30" == ffi.string(msg))
	assert(lib.gen_id_test(11, 22, ffi.defs.GEN_ID(11, 22)))
	lib.hello_csrc(ffi.defs.MY_MACRO(2), msg)
	assert("id:246" == ffi.string(msg))
	assert(lib.export);
	local ok, r = pcall(function ()
		return lib.not_export(100)
	end)
	assert(not ok);

	local lib2,ext2 = ffi.csrc('./test/foo.c')
	assert(lib2.footest(ffi.defs.FOO_ID) == (777 * 2))

	local lib3,ext3 = ffi.csrc('test2', [[
	void bar(int id) { return id }
	]])

	assert(not lib3, "should be nil due to compile error")
end
